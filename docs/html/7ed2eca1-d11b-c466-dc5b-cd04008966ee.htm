<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-zh-CN.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Serializer 类</title><meta name="Language" content="zh-cn" /><meta name="System.Keywords" content="Serializer 类" /><meta name="System.Keywords" content="XPatchLib.Serializer 类" /><meta name="System.Keywords" content="Serializer 类, 关于 Serializer 类" /><meta name="Microsoft.Help.F1" content="XPatchLib.Serializer" /><meta name="Microsoft.Help.Id" content="T:XPatchLib.Serializer" /><meta name="Description" content="增量内容序列化器。" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="XPatchLib" /><meta name="file" content="7ed2eca1-d11b-c466-dc5b-cd04008966ee" /><meta name="guid" content="7ed2eca1-d11b-c466-dc5b-cd04008966ee" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">XPatchLib - .Net增量内容序列化/反序列化工工具<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="9afec0dc-3356-d067-ab5e-a67445fcf631.htm" title="XPatchLib - .Net增量内容序列化/反序列化工工具" tocid="roottoc">XPatchLib - .Net增量内容序列化/反序列化工工具</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="9afec0dc-3356-d067-ab5e-a67445fcf631.htm" title="命名空间" tocid="9afec0dc-3356-d067-ab5e-a67445fcf631">命名空间</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="683748d6-c9bf-2af3-65d3-7ad60286cfbe.htm" title="XPatchLib" tocid="683748d6-c9bf-2af3-65d3-7ad60286cfbe">XPatchLib</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="7ed2eca1-d11b-c466-dc5b-cd04008966ee.htm" title="Serializer 类" tocid="7ed2eca1-d11b-c466-dc5b-cd04008966ee">Serializer 类</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ef9bc8c5-dc45-f16e-2694-f037c589673d.htm" title="Serializer 构造函数 " tocid="ef9bc8c5-dc45-f16e-2694-f037c589673d">Serializer 构造函数 </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="b649727d-4604-25ec-d488-d4638470293b.htm" title="Serializer 方法" tocid="b649727d-4604-25ec-d488-d4638470293b">Serializer 方法</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Serializer 类</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
                增量内容序列化器。
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />继承层次</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="http://msdn2.microsoft.com/zh-cn/library/e5kfa45b" target="_blank">System<span id="LST55475A07_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST55475A07_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">XPatchLib<span id="LST55475A07_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST55475A07_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Serializer</span><br /></div><p> </p>
        <strong>命名空间：</strong> 
     <a href="683748d6-c9bf-2af3-65d3-7ad60286cfbe.htm">XPatchLib</a><br />
        <strong>程序集：</strong>
     XPatchLib (在 XPatchLib.dll 中) 版本：3.0.5.1<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />语法</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACA');return false;" title="复制">复制</a></div></div><div id="ID1EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Serializer</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACA");</script></div><p><span class="selflink">Serializer</span> 类型公开以下成员。</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />构造函数</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>名称</th><th>说明</th></tr><tr data="public;declared;notNetfw;SHFB_VBPI_Lbl_19BC2879;SHFB_VBPI_Lbl_4CFFD8A2;"><td><img src="../icons/pubmethod.gif" alt="公共方法" title="公共方法" /></td><td><a href="ef9bc8c5-dc45-f16e-2694-f037c589673d.htm">Serializer</a></td><td><div class="summary">
                初始化 <span class="code"> Serializer </span> 类的新实例。
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />方法</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>名称</th><th>说明</th></tr><tr data="public;declared;notNetfw;SHFB_VBPI_Lbl_19BC2879;SHFB_VBPI_Lbl_4CFFD8A2;"><td><img src="../icons/pubmethod.gif" alt="公共方法" title="公共方法" /><img src="../icons/CodeExample.png" alt="代码示例" title="代码示例" /></td><td><a href="df89ca0d-a07e-9139-34f1-fa70a4e90b1d.htm">Combine(ITextReader, Object)</a></td><td><div class="summary">
                反序列化指定 <a href="6abf9cf3-d85a-44a0-839e-e46de7e4e201.htm">ITextReader</a> 包含的增量文档，并与 原始对象 进行数据合并。
            </div></td></tr><tr data="public;declared;notNetfw;SHFB_VBPI_Lbl_19BC2879;SHFB_VBPI_Lbl_4CFFD8A2;"><td><img src="../icons/pubmethod.gif" alt="公共方法" title="公共方法" /><img src="../icons/CodeExample.png" alt="代码示例" title="代码示例" /></td><td><a href="53419995-c511-593f-d74c-3089a16fdc72.htm">Combine(ITextReader, Object, Boolean)</a></td><td><div class="summary">
                以可指定是否覆盖原始对象的方式反序列化指定 <a href="6abf9cf3-d85a-44a0-839e-e46de7e4e201.htm">ITextReader</a> 包含的增量文档，并与 原始对象 进行数据合并。
            </div></td></tr><tr data="public;declared;notNetfw;SHFB_VBPI_Lbl_19BC2879;SHFB_VBPI_Lbl_4CFFD8A2;"><td><img src="../icons/pubmethod.gif" alt="公共方法" title="公共方法" /><img src="../icons/CodeExample.png" alt="代码示例" title="代码示例" /></td><td><a href="08160979-d0b7-0d98-dc68-ad063bbf89d3.htm">Divide</a></td><td><div class="summary">
                使用指定的 <a href="ea9c2cea-fb3c-0dcd-6dad-a54f7f0f476d.htm">ITextWriter</a> 序列化指定的 原始对象 <span class="parameter">pOriValue</span> 与 更新对象 <span class="parameter">pRevValue</span>
                间的增量内容。
            </div></td></tr><tr data="public;declared;notNetfw;SHFB_VBPI_Lbl_19BC2879;SHFB_VBPI_Lbl_4CFFD8A2;"><td><img src="../icons/pubmethod.gif" alt="公共方法" title="公共方法" /></td><td><a href="7e32aea6-6373-4580-e2e1-e9d5aa8a8425.htm">RegisterType</a></td><td><div class="summary">
                向 <span class="selflink">Serializer</span> 注册类型与主键集合。
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />备注</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
                    比较同一对象类型的两个的实例间的差异内容，并产生增量的内容，使用指定的 文档写入器 <a href="ea9c2cea-fb3c-0dcd-6dad-a54f7f0f476d.htm">ITextWriter</a> 实例将增量内容写入文档，
                    也可以将增量的文档通过制定的文档读取器 <a href="6abf9cf3-d85a-44a0-839e-e46de7e4e201.htm">ITextReader</a> 实例反序列化并附加至原始的对象实例上。
                </p><p>
        使用 Divide 方法将原始对象与更新后对象之间差异内容的的公共字段和读/写属性转换为 增量数据。它不转换方法、索引器、私有字段或只读属性。
      </p><p>
                    使用 Combine 方法将读取增量内容，并将增量数据与待合并的原始对象的数据合并，产生新的对象实例。（也可以使用重载方法，直接在原始对象上附加数据，这样将不会产生新的对象实例）
                </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />示例</span></div><div id="ID6RBSection" class="collapsibleSection"><p>简单对象增量序列化/反序列化示例</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAKABA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAKABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAKABA');return false;" title="复制">复制</a></div></div><div id="ID1EAKABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> XPatchLib;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">namespace</span> XPatchLib.Example
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> SimpleExample
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args)
        {
            Book OriBook = <span class="highlight-keyword">new</span> Book()
            {
                ISBN = <span class="highlight-literal">"0-385-50420-9"</span>,
                Name = <span class="highlight-literal">"The Da Vinci Code"</span>,
                Author = <span class="highlight-keyword">new</span> Author() {FirstName = <span class="highlight-literal">"Dan"</span>, LastName = <span class="highlight-literal">"Brown"</span>}
            };

            Book RevBook = <span class="highlight-keyword">new</span> Book()
            {
                ISBN = <span class="highlight-literal">"0-385-50420-9"</span>,
                Name = <span class="highlight-literal">"达芬奇密码"</span>,
                Author = <span class="highlight-keyword">new</span> Author() {FirstName = <span class="highlight-literal">"丹"</span>, LastName = <span class="highlight-literal">"布朗"</span>}
            };

            StringBuilder context = <span class="highlight-keyword">new</span> StringBuilder();

            System.Xml.XmlWriterSettings settings = <span class="highlight-keyword">new</span> System.Xml.XmlWriterSettings();
            settings.Encoding = <span class="highlight-keyword">new</span> UTF8Encoding(<span class="highlight-keyword">false</span>);
            settings.OmitXmlDeclaration = <span class="highlight-keyword">true</span>;
            settings.ConformanceLevel = System.Xml.ConformanceLevel.Document;
            Serializer serializer = <span class="highlight-keyword">new</span> Serializer(<span class="highlight-keyword">typeof</span>(Book));

            <span class="highlight-keyword">using</span> (StringWriter strWriter = <span class="highlight-keyword">new</span> StringWriter(context))
            {
                <span class="highlight-keyword">using</span> (XmlTextWriter writer = <span class="highlight-keyword">new</span> XmlTextWriter(strWriter))
                {
                    serializer.Divide(writer, OriBook, RevBook);
                }
            }

            Book NewBook = <span class="highlight-keyword">null</span>;

            <span class="highlight-keyword">using</span> (XmlTextReader reader = <span class="highlight-keyword">new</span> XmlTextReader(<span class="highlight-keyword">new</span> StringReader(context.ToString())))
            {
                NewBook = serializer.Combine(reader, OriBook, <span class="highlight-keyword">false</span>) <span class="highlight-keyword">as</span> Book;
            }

            Console.WriteLine(NewBook);
        }
    }

    [XPatchLib.PrimaryKey(<span class="highlight-literal">"ISBN"</span>)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Book
    {
        <span class="highlight-keyword">static</span> <span class="highlight-keyword">string</span> OUTPUT;

        <span class="highlight-keyword">static</span> Book()
        {
            StringBuilder output = <span class="highlight-keyword">new</span> StringBuilder();
            output.AppendLine(<span class="highlight-literal">"ISBN:{0}"</span>);
            output.AppendLine(<span class="highlight-literal">"Name:{1}"</span>);
            output.AppendLine(<span class="highlight-literal">"Author:{2} {3}"</span>);
            OUTPUT = output.ToString();
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> ISBN { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Name { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        <span class="highlight-keyword">public</span> Author Author { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> ToString()
        {
            <span class="highlight-keyword">return</span> <span class="highlight-keyword">string</span>.Format(OUTPUT, <span class="highlight-keyword">this</span>.ISBN, <span class="highlight-keyword">this</span>.Name, <span class="highlight-keyword">this</span>.Author.FirstName, <span class="highlight-keyword">this</span>.Author.LastName);
        }
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Author
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> FirstName { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> LastName { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAKABA");</script><p>
        序列化增量内容如下所示：
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAIABA_tab1" class="codeSnippetContainerTabSingle">context</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAIABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAIABA');return false;" title="复制">复制</a></div></div><div id="ID1EAIABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Book</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Author</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">FirstName</span><span class="highlight-xml-bracket">&gt;</span>丹<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">FirstName</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LastName</span><span class="highlight-xml-bracket">&gt;</span>布朗<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LastName</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Author</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Name</span><span class="highlight-xml-bracket">&gt;</span>达芬奇密码<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Name</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Book</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAIABA");</script><p>
        输出内容如下：
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAGABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAGABA');return false;" title="复制">复制</a></div></div><div id="ID1EAGABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">ISBN:0-385-50420-9
Name:达芬奇密码
Author:丹 布朗</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAGABA");</script><p>较复杂的对象增量序列化示例</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAEABA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAEABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAEABA');return false;" title="复制">复制</a></div></div><div id="ID1EAEABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> System.Xml;

<span class="highlight-keyword">namespace</span> XPatchLib.Example
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ComplexObjCombineAndDivide
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-keyword">var</span> t = <span class="highlight-keyword">new</span> ComplexObjCombineAndDivide();

            t.Divide(<span class="highlight-literal">"patch.xml"</span>);
            t.Combine(<span class="highlight-literal">"patch.xml"</span>);
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> Divide(<span class="highlight-keyword">string</span> filename)
        {
            <span class="highlight-comment">//原始对象</span>
            <span class="highlight-keyword">var</span> order = CreatePuchaseOrder();
            <span class="highlight-comment">//更新后的对象</span>
            <span class="highlight-keyword">var</span> newOrder = CreatePuchaseOrder();

            <span class="highlight-comment">//改变更新后对象的内容</span>
            <span class="highlight-comment">//由于直接修改了主键的内容，将被视为删除了原有主键为Widget S的对象，并新增了主键为Widget B的对象。</span>
            newOrder.OrderedItems[<span class="highlight-number">0</span>].ItemName = <span class="highlight-literal">"Widget B"</span>;
            newOrder.OrderedItems[<span class="highlight-number">0</span>].Description = <span class="highlight-literal">"Big widget"</span>;
            newOrder.OrderedItems[<span class="highlight-number">0</span>].UnitPrice = (<span class="highlight-keyword">decimal</span>) <span class="highlight-number">26.78</span>;
            newOrder.OrderedItems[<span class="highlight-number">0</span>].Quantity = <span class="highlight-number">5</span>;

            newOrder.ShipCost = (<span class="highlight-keyword">decimal</span>) <span class="highlight-number">12.51</span>;

            <span class="highlight-comment">//产生增量内容</span>
            <span class="highlight-keyword">var</span> serializer = <span class="highlight-keyword">new</span> Serializer(<span class="highlight-keyword">typeof</span>(PurchaseOrder));

            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> writer = <span class="highlight-keyword">new</span> XmlTextWriter(filename, <span class="highlight-keyword">new</span> UTF8Encoding(<span class="highlight-keyword">false</span>)))
            {
                serializer.Divide(writer, order, newOrder);
            }
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> OuputPuchaseOrder(PurchaseOrder order)
        {
            Console.WriteLine(<span class="highlight-literal">"OrderDate: "</span> + order.OrderDate);
            ReadAddress(order.ShipTo, <span class="highlight-literal">"Ship To:"</span>);
            Console.WriteLine(<span class="highlight-literal">"Items to be shipped:"</span>);
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> oi <span class="highlight-keyword">in</span> order.OrderedItems)
                Console.WriteLine(<span class="highlight-literal">"\t"</span> +
                                  oi.ItemName + <span class="highlight-literal">"\t"</span> +
                                  oi.Description + <span class="highlight-literal">"\t"</span> +
                                  oi.UnitPrice + <span class="highlight-literal">"\t"</span> +
                                  oi.Quantity + <span class="highlight-literal">"\t"</span> +
                                  oi.LineTotal);
            Console.WriteLine();
            Console.WriteLine(<span class="highlight-literal">"Subtotal:\t"</span> + order.SubTotal);
            Console.WriteLine(<span class="highlight-literal">"Shipping:\t"</span> + order.ShipCost);
            Console.WriteLine(<span class="highlight-literal">"Total:\t"</span> + order.TotalCost);
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> Combine(<span class="highlight-keyword">string</span> filename)
        {
            <span class="highlight-comment">//合并增量内容至原始对象</span>
            <span class="highlight-keyword">var</span> serializer = <span class="highlight-keyword">new</span> Serializer(<span class="highlight-keyword">typeof</span>(PurchaseOrder));

            <span class="highlight-keyword">var</span> oldOrder = CreatePuchaseOrder();
            PurchaseOrder newOrder = <span class="highlight-keyword">null</span>;

            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> fs = <span class="highlight-keyword">new</span> FileStream(filename, FileMode.Open))
            {
                <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> reader = <span class="highlight-keyword">new</span> XmlTextReader(fs))
                {
                    newOrder = (PurchaseOrder) serializer.Combine(reader, oldOrder);
                }
            }

            Console.WriteLine(<span class="highlight-literal">"OldOrder: "</span>);
            OuputPuchaseOrder(oldOrder);
            Console.WriteLine(<span class="highlight-literal">"---------- "</span>);
            Console.WriteLine(<span class="highlight-literal">"NewOrder: "</span>);
            OuputPuchaseOrder(newOrder);
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ReadAddress(Address a, <span class="highlight-keyword">string</span> label)
        {
            Console.WriteLine(label);
            Console.WriteLine(<span class="highlight-literal">"\t"</span> + a.Name);
            Console.WriteLine(<span class="highlight-literal">"\t"</span> + a.Line1);
            Console.WriteLine(<span class="highlight-literal">"\t"</span> + a.City);
            Console.WriteLine(<span class="highlight-literal">"\t"</span> + a.State);
            Console.WriteLine(<span class="highlight-literal">"\t"</span> + a.Zip);
            Console.WriteLine();
        }

        <span class="highlight-keyword">private</span> PurchaseOrder CreatePuchaseOrder()
        {
            <span class="highlight-keyword">var</span> result = <span class="highlight-keyword">new</span> PurchaseOrder();

            <span class="highlight-keyword">var</span> billAddress = <span class="highlight-keyword">new</span> Address();
            billAddress.Name = <span class="highlight-literal">"Teresa Atkinson"</span>;
            billAddress.Line1 = <span class="highlight-literal">"1 Main St."</span>;
            billAddress.City = <span class="highlight-literal">"AnyTown"</span>;
            billAddress.State = <span class="highlight-literal">"WA"</span>;
            billAddress.Zip = <span class="highlight-literal">"00000"</span>;
            result.ShipTo = billAddress;
            result.OrderDate = DateTime.Now.ToLongDateString();

            <span class="highlight-keyword">var</span> i1 = <span class="highlight-keyword">new</span> OrderedItem();
            i1.ItemName = <span class="highlight-literal">"Widget S"</span>;
            i1.Description = <span class="highlight-literal">"Small widget"</span>;
            i1.UnitPrice = (<span class="highlight-keyword">decimal</span>) <span class="highlight-number">5.23</span>;
            i1.Quantity = <span class="highlight-number">3</span>;

            OrderedItem[] items = {i1};
            result.OrderedItems = items;
            result.ShipCost = (<span class="highlight-keyword">decimal</span>) <span class="highlight-number">12.51</span>;

            <span class="highlight-keyword">return</span> result;
        }
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Address
        {
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> City;
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Line1;
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Name;
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> State;
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Zip;
        }

        [XPatchLib.PrimaryKey(<span class="highlight-literal">"ItemName"</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> OrderedItem
        {
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Description { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> ItemName { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">decimal</span> LineTotal
            {
                <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> UnitPrice * Quantity; }
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> Quantity { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">decimal</span> UnitPrice { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> PurchaseOrder
        {
            <span class="highlight-keyword">public</span> OrderedItem[] OrderedItems;
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> OrderDate { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
            <span class="highlight-keyword">public</span> <span class="highlight-keyword">decimal</span> ShipCost { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
            <span class="highlight-keyword">public</span> Address ShipTo { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">decimal</span> SubTotal
            {
                <span class="highlight-keyword">get</span>
                {
                    <span class="highlight-keyword">var</span> subTotal = <span class="highlight-keyword">new</span> <span class="highlight-keyword">decimal</span>();
                    <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> oi <span class="highlight-keyword">in</span> OrderedItems)
                        subTotal += oi.LineTotal;
                    <span class="highlight-keyword">return</span> subTotal;
                }
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">decimal</span> TotalCost
            {
                <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> SubTotal + ShipCost; }
            }
        }

    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAEABA");</script><p>
        序列化增量内容的 输出如下所示：
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACABA_tab1" class="codeSnippetContainerTabSingle">patch.xml</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACABA');return false;" title="复制">复制</a></div></div><div id="ID1EACABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;?</span><span class="highlight-xml-tag">xml</span> <span class="highlight-xml-attribute-name">version</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"1.0"</span> <span class="highlight-xml-attribute-name">encoding</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"utf-8"</span><span class="highlight-xml-bracket">?&gt;</span>
<span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">PurchaseOrder</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">OrderedItems</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">OrderedItem</span> <span class="highlight-xml-attribute-name">Action</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Remove"</span> <span class="highlight-xml-attribute-name">ItemName</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Widget S"</span> <span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">OrderedItem</span> <span class="highlight-xml-attribute-name">Action</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Add"</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Description</span><span class="highlight-xml-bracket">&gt;</span>Big widget<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Description</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">ItemName</span><span class="highlight-xml-bracket">&gt;</span>Widget B<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">ItemName</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Quantity</span><span class="highlight-xml-bracket">&gt;</span>5<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Quantity</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">UnitPrice</span><span class="highlight-xml-bracket">&gt;</span>26.78<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">UnitPrice</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">OrderedItem</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">OrderedItems</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">PurchaseOrder</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACABA");</script><p>
        输出内容如下：
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="复制">复制</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">OldOrder:
OrderDate: 2017年3月12日
Ship To:
        Teresa Atkinson
        1 Main St.
        AnyTown
        WA
        00000

Items to be shipped:
        Widget S        Small widget    5.23    3       15.69

Subtotal:       15.69
Shipping:       12.51
Total:  28.20
----------
NewOrder:
OrderDate: 2017年3月12日
Ship To:
        Teresa Atkinson
        1 Main St.
        AnyTown
        WA
        00000

Items to be shipped:
        Widget B        Big widget      26.78   5       133.90

Subtotal:       133.90
Shipping:       12.51
Total:  146.41</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABA");</script></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />版本信息</span></div><div id="ID7RBSection" class="collapsibleSection"><h4 class="subHeading">.NET Framework</h4>支持版本：4.0, 3.5, 2.0<br /><h4 class="subHeading">.NET Standard</h4>支持版本：1.3, 1.0<br /></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />参见</span></div><div id="ID8RBSection" class="collapsibleSection"><h4 class="subHeading">引用</h4><div class="seeAlsoStyle"><a href="683748d6-c9bf-2af3-65d3-7ad60286cfbe.htm">XPatchLib 命名空间</a></div></div></div></div><div id="pageFooter" class="pageFooter"> </div></body></html>